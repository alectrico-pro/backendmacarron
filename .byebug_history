exit
eixt
cont
exit
cont
exit
cont
n
headers
status
n
s
command.success?
command
n
s
cont
Reader.all.first
Reader.all.last
Reader.count
cont
Reader.all.first
Reader.all.last
Reader.las
Reader.count
cont
n
respuesta
n
s
current_reader
n
s
autorizacion
n
auth_token
n
cont
n
respuesta
n
s
current_reader
n
auth_token
autorizacion.result
autorizacion
n
params[:rid]
auth_token
n
params[:rid]
command
n
cont
exit
valid_macarron
cont
n
history
up
n
s
n
cont
exit
Macarron.new( location: CFG[:autorizador_alectrica_url.to_s], identifier: 'w', key: ENV['SECRET_KEY_BASE'] )
                          key: ENV['SECRET_KEY_BASE'] );ENV['SECRET_KEY_BASE']
                          key: ENV['SECRET_KEY_BASE'] );
                          identifier: 'w',\
 macarron =  Macarron.new( location: CFG[:autorizador_alectrica_url.to_s],\
CFG[:autorizador_alectrica_url.to_s]
cont
@origen
@origin
header_origin
exit
header_origin
@origen
cont
header_origin
@origen
exit
header_origin
@origen
exit
cont
n
header_origin == @origen
exit
header_origin 
header_origin == @origen
header_origin = @origen
n
@origen
header_origin
exit
header_origin
cont
exit
n
@origen
request.headers['Origin']
exit
request.headers['Origen']
request.headers["Origen"]
request.header["Origen"]
request.headers["Origen"]
request.headers
exit
e
E
HMAC_SECRET
HMAX_SECRET
token
n
cont
key
s
@decoded_auth_token
n
@decoded_auth_token
n
body
n
exit
cont
n
@decoded_auth_token
e.inspect
e
n
body
n
exit
body
HashWithIndifferentAccess.new body
n
body
n
token
HMAC_SECRET
exit
n
cont
body
n
cont
body
n
cont
body
n
N
HMAC_SECRET
token
cont
respuesta
n
autorizacion
n
@key
n
response.parsed_response["access_token"]
response.parse_response["access_token"]
response
n
cont
n
@url
n
command
n
response.parsed_response["access_token"]
n
response.parsed_response["access_token"]
@key
n
response.response.class
response.response
response
n
exit
self
response
n
@rid
exit
n
s
cont
n
autorizacion
n
s
params[:rid]
exit
@url
n
cont
n
@url
n
command
n
cont
n
decoded_token
n
exit
     token = JsonWebToken.encode( rid: reader.as_json( :include => :user )["rid"] )
     token = JsonWebToken.encode( rid: reader.as_json( :include => :user )["rid"] 
exit
exi
reader.as_json( :include => :user )[:rid]
reader.as_json( :include => :user )["rid"]
reader.as_json( :include => :user )
cont
n
exit
decoded_auth_token
n
cont
exit
decoded_auth_token
reader_decoded
