cont
n
decoded_token
n
exit
     token = JsonWebToken.encode( rid: reader.as_json( :include => :user )["rid"] )
     token = JsonWebToken.encode( rid: reader.as_json( :include => :user )["rid"] 
exit
exi
reader.as_json( :include => :user )[:rid]
reader.as_json( :include => :user )["rid"]
reader.as_json( :include => :user )
cont
n
exit
decoded_auth_token
n
cont
exit
decoded_auth_token
reader_decoded
n
cont
n
exit
cont
n
cont
exit
n
exit
cont
con
cont
cot
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
cont
@decoded_auth_token
exit
cont
reader
n
@decoded_auth_token
n
exit
@current_reader
exit
cont
n
Reader.count
n
exit
cont
n
decoded_auth_token
exit
cont
n
cont
reader_decoded
n
cont
n
exit
JsonWebToken.decode(params["auth_token"])
params["auth_token"]
params
resultado
resultad
macarron
exit
reader.user
cont
n
exit
params
n
exit
n
cont
n
reader
cont
User.first.readers.first
User.first.readers
User.first
user
reader
cliente
exit
cliente
reader
exit
params
contacto_params
reader
cliente
exit
 contacto_params[:rid]
cliente.save!
   cliente = Client.find_or_create_by(:reader_id => contacto_params[:rid], :clientId => contacto_params[:clientId])
cliente
exit
cliente.sa
      cliente = Client.find_or_create_by(:reader_id => contacto_params[:rid], :clientId => contacto_params[:clientId])
cliente
Contacto.first
Contacto.count
user.reader
user.readers.count
r.user
r
r.save!
r.user_id = 1
r=Reader.first
Reader.first
Reader.count
User.first
User
User.count
cont
respuesta
cont
n
respuesta
cont
n
cont
n
cont
n
cont
n
exit
cont
exit
cont
n
current_reader
cont
n
Reader.count
Contacto.count
cont
Reader.count
Contacto.count
cont
exit
reader_decoded= JsonWebToken.decode(json['auth_token'])
r
cont
@rid
cont
@rid
cont
@rid
rid
response
exit
rid
cont
exit
rid
cont
exit
params[:rid]
exit
JsonWebToken.decode(json['auth_token'])
exit
JsonWebToken.decode(json['auth_token'])
JsonWebToken.decode(json['auth_token']
JsonWebToken.decode(json['origen'])
JsonWebToken.decode(json['auth_token'])
JsonWebToken.decode(json['reader'])
JsonWebToken.decode(json)
JsonWebToken.decode(json['auth_token'])
exit
json['reader']
json['auth_token']['reader']
decoded= JsonWebToken.decode(json['auth_token']['reader']]
decoded= JsonWebToken.decode(json['auth_token']['reader']
decoded= JsonWebToken.decode(json['auth_token'])
reader_decoded
exit
JsonWebToken.decode(json['auth_token'])
json
exit
JSON.parse(j["contenido"]["reader"])
JSON.parse(j["contenido"]["reader"].as_json)
j["contenido"]["reader"].as_json
j["contenido"]["reader"].to_json
j["contenido"]["reader"].as_json.to_json
j["contenido"]["reader"].as_json
r.from_json(j["contenido"]["reader"].as_json)
r.from_json(j["contenido"]["reader"].as_json[1])
r.from_json(j["contenido"]["reader"][1])
r.from_json(j["contenido"]["reader"][10])
r.from_json(j["contenido"]["reader"][0])
r.from_json(j["contenido"]["reader"])
r.from_json(j.to_json)
r.from_json(j[0].to_json)
r.from_json(j[1].to_json)
r.from_json(j["contenido"][1].to_json)
r.from_json(j["contenido"][1].as_json)
r.from_json(j["contenido"][1])
r.from_json(j["contenido"]["reader"])
r.from_json(j["contenido"]["reader"].to_json)
r.from_json(j["contenido"]["reader"].as_json)
r.from_json(j['contenido']["reader"].as_json)
r.from_json(j['contenido']['reader'].as_json)
r.from_json(j['contenido']['reader'].to_json)
r.from_json(j['contenido']['reader'])
j['contenido']['reader']
j['contenido']
j
j.as_json
j
