exit
n
cont
tipo_equipo.img
n
cont
n
s
n
exit
ids
un_id
ids.select{|id| id == un_id.to_i}.count
ids.select{|id| id= == un_id.to_i}.count
ids
exit
id
id.select{|id| id == un_id.to_i}.count
id
s
n
id
n
un_id
n
@parameters[key]
key
s
exit
find_tipo_equipo_by_id('100')
find_tipo_equipo_by_id(100)
find_tipo_equipo_by_id @params[:carga_id] 
@params[:carga_id]
carga_id
m
tipo_circuito_hash
n
s
cont
e
n
servicio
exit
carga.tipo_equipo
carga
exit
carga.tipo_equipo
carga
exit
s
current_reader
@current_reader
auth_token
autorizacion.result
cont
n
resultado_del_verificador
n
verificador
verificasdor
n
exit
verificador.get_result
verificador
n
exit
verificador.get_result
verificador.methods
verificador
n
params['macarron_de_autorizacion']
params
exit
cont
exit
decoded_token
decoded_cotken
@origen.match( C.autorizador_alectrica_url )
origen.match( C.autorizador_alectrica_url )
@origen
origen
C.autorizador_alectrica_url
c.autorizador_alectrica_url
exit
C.autorizador_alectrica_url
C.autorizador_alectrica_ur
C.autorizador_alectrica_url
C
CFG
@origen
origen
expira
exit
resultado.send(:reader)
resultado.reader
resultado.send(:decoded_auth_token)[:logged_in]
resultado.send(:decoded_auth_token)(:logged_in)
resultado.send(:decoded_auth_token)(logged_in)
resultado.send(:decoded_auth_token)[logged_in]
resultado.send(:decoded_auth_token)[logged_i
resultado.send(:decoded_auth_token)
resultado.decoded_auth_token
resultado.decode_auth_token
resultado["reader"]
resultado[:reader]
resultado
n
exit
autorizacion.call
autorizacion
n
exit
exception
n
exit
exception
n
exit
decoded_token
n
exit
params[rid]
params
exit
eixt
cont
exit
cont
exit
cont
n
headers
status
n
s
command.success?
command
n
s
cont
Reader.all.first
Reader.all.last
Reader.count
cont
Reader.all.first
Reader.all.last
Reader.las
Reader.count
cont
n
respuesta
n
s
current_reader
n
s
autorizacion
n
auth_token
n
cont
n
respuesta
n
s
current_reader
n
auth_token
autorizacion.result
autorizacion
n
params[:rid]
auth_token
n
params[:rid]
command
n
cont
exit
valid_macarron
cont
n
history
up
n
s
n
cont
exit
Macarron.new( location: CFG[:autorizador_alectrica_url.to_s], identifier: 'w', key: ENV['SECRET_KEY_BASE'] )
                          key: ENV['SECRET_KEY_BASE'] );ENV['SECRET_KEY_BASE']
                          key: ENV['SECRET_KEY_BASE'] );
                          identifier: 'w',\
 macarron =  Macarron.new( location: CFG[:autorizador_alectrica_url.to_s],\
CFG[:autorizador_alectrica_url.to_s]
cont
@origen
@origin
header_origin
exit
header_origin
@origen
cont
header_origin
@origen
exit
header_origin
@origen
exit
cont
n
header_origin == @origen
exit
header_origin 
header_origin == @origen
header_origin = @origen
n
@origen
header_origin
exit
header_origin
cont
exit
n
@origen
request.headers['Origin']
exit
request.headers['Origen']
request.headers["Origen"]
request.header["Origen"]
request.headers["Origen"]
request.headers
exit
e
E
HMAC_SECRET
HMAX_SECRET
token
n
cont
key
s
@decoded_auth_token
n
@decoded_auth_token
n
body
n
exit
cont
n
@decoded_auth_token
e.inspect
e
n
body
